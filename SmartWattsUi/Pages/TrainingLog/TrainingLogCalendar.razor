
@using SmartWattsCore;
@using SmartWattsCore.Models;
@using SmartWattsUi.Services;

@inject AppState _appState;
@inject RideServices _rideServices;

	<div class="row container-fluid">
		<div class="col-2"></div>
		<div class="col-1">
		</div>
		<div class="col-6">
			<div>
				@foreach (var year in yearsToDisplay)
				{
					<span class="@(year == selectedYear ? "month-year-selected" : "month-year")" @onclick="e => ChangeYear(year)">@year</span>
				}
			</div>
			<h4>
				<span class="oi oi-arrow-circle-left left-arrow" @onclick="e => ChangeMonth(-1)"></span>
				@((Constants.Months)selectedMonth) - @selectedYear
				<span class="oi oi-arrow-circle-right right-arrow"  @onclick="e => ChangeMonth(1)"></span>
			</h4>
			<div class="grid-container">
				@foreach (var day in Constants.DaysOfTheWeek)
				{
					<div class="grid-header">@day</div>
				}
				@for (int i = daysBefore; i >= 1; i--)
				{
					<div class="grid-item"></div>
				}
				@foreach (var i in Enumerable.Range(1, daysInMonth))
				{
					<div class="grid-item-in-month" style="background-color: @GetIntensity(i)" @onclick="e => ViewRide(i)"
						 @onmouseover="e => ShowRides(i)" @onmouseout="e => dayHoverOn = false">
						<span>@i</span>
						<p><b>@GetDurationForDay(i)</b></p>
					@if (dayHoverOn && i == dayHovered && hoveredRides != null)
					{
						<div class="day-hover">
						@foreach (var ride in hoveredRides)
						{
							<p>
								@ride.RideMetaData.RideName - @Helpers.ConvertSecToReadable(ride.RideMetaData.TimeSeconds, false)
							</p>
						}
						</div>
					}
					</div>
				}

				@for (int i = 1; i <= daysAfter; i++)
				{
					<div class="grid-item"></div>
				}
			</div>
		</div>
		<div class="col-2"></div>
	</div>

@code {
	List<int> yearsToDisplay = new List<int>();
	int selectedYear;
	int selectedMonth;
	bool dayHoverOn = false;
	int dayHovered;
	List<Ride> hoveredRides;

	DateTime firstDay;
	DateTime lastDay;

	int daysBefore;
	int daysAfter;

	int daysInMonth;

	protected override void OnInitialized()
	{
		var currentDate = DateTime.Now;
		selectedYear = currentDate.Year;
		selectedMonth = currentDate.Month;

		GetYearsWithRides();

		RenderCalendar(selectedYear, selectedMonth);

	}


	private void RenderCalendar(int year, int month)
	{
		firstDay = new DateTime(year, month, 1);
		lastDay = firstDay.AddMonths(1).AddSeconds(-1);

		var firstDayDayOfWeek = (int)firstDay.DayOfWeek;
		var lastDayDayOfWeek = (int)lastDay.DayOfWeek;

		daysBefore = (firstDayDayOfWeek == 0 ? 7 : firstDayDayOfWeek) - 1;
		daysAfter = -((lastDayDayOfWeek == 0 ? 7 : lastDayDayOfWeek) - 7);

		daysInMonth = DateTime.DaysInMonth(year, month);
	}

	private void GetYearsWithRides()
	{
		var uniqueYearRides = _appState.LoggedInUser.Rides.GroupBy(r => r.RideMetaData.Date.Year).Select(g => g.First());
		foreach (var ride in uniqueYearRides)
		{
			yearsToDisplay.Add(ride.RideMetaData.Date.Year);
		}
	}

	private void ViewRide(int day)
	{
		var ride = _appState.LoggedInUser.Rides.Where(r => r.RideMetaData.Date.Month == selectedMonth
												&& r.RideMetaData.Date.Year == selectedYear
												&& r.RideMetaData.Date.Day == day);

		if (ride == null || ride.Count() == 0)
		{
			return;
		}

		var bestEffort = ride.Max(r => r.TopIntensity.EffortIndex);
		var topRide = ride.First(r => r.TopIntensity.EffortIndex == bestEffort);

		_appState.ToggleRideViewWindow(true, topRide);
	}

	private string GetIntensity(int day)
	{
		var rides = GetRidesForTheDay(day);

		if (rides == null || rides.Count() == 0)
		{
			return "white";
		}

		var topIntensity = rides.Max(r => r.TopIntensity.EffortIndex);
		return Constants.Intensities.Find(i => i.EffortIndex == topIntensity).Color;
	}

	private List<Ride> GetRidesForTheDay(int day)
	{
		return _appState.LoggedInUser.Rides.Where(r =>
		r.RideMetaData.Date.Month == selectedMonth && r.RideMetaData.Date.Year == selectedYear && r.RideMetaData.Date.Day == day).ToList();
	}

	private string GetDurationForDay(int day)
	{
		var rides = GetRidesForTheDay(day);
		var sum = rides.Sum(r => r.RideMetaData.TimeSeconds);

		return Helpers.ConvertSecToReadable(sum, false);
	}


	private void ChangeYear(int year)
	{
		selectedYear = year;

		RenderCalendar(selectedYear, selectedMonth);
	}

	private void ChangeMonth(int change)
	{
		var prevMon = selectedMonth;

		var newMonth = prevMon + change;
		if (newMonth == 0)
		{
			selectedMonth = 12;
			selectedYear--;
		}
		else if (newMonth == 13)
		{
			selectedMonth = 1;
			selectedYear++;
		}
		else
		{
			selectedMonth = newMonth;
		}

		RenderCalendar(selectedYear, selectedMonth);
	}

	private void ShowRides(int day)
	{
		hoveredRides = new List<Ride>();
		dayHovered = day;
		dayHoverOn = true;
		hoveredRides = _appState.LoggedInUser.Rides.Where(r => r.RideMetaData.Date.Month == selectedMonth
												&& r.RideMetaData.Date.Year == selectedYear
												&& r.RideMetaData.Date.Day == day).ToList();
	}


}

<style>
	.grid-container {
		display: grid;
		grid-template-columns: repeat(7, 70px);
		grid-template-rows: repeat(7, 70px);
		padding: 5px;
	}

	.grid-item {
		border: 1px solid rgba(0, 0, 0, 0.8);
		padding: 10px;
		background-color: lightgray;
	}

	.grid-item-in-month {
		border: 1px solid rgba(0, 0, 0, 0.8);
		padding: 10px;
		cursor: pointer;

	}

	.month-year-selected {
		color: purple;
		font-size: 16px;
	}

	.month-year {
		color: blue;
		text-decoration: underline;
		font-size: 14px;
		cursor: pointer;
	}

	.right-arrow {
		cursor: pointer;
	}

	.left-arrow {
		cursor: pointer;
	}

	.week-totals {
		position: relative;
		top: 30%;
		right: 90%;
	}

	.one-week-total{
		height: 70px;
	}

	.day-hover {
		position: absolute;
		border: solid 1px;
		background-color: lightblue;
	}
</style>
