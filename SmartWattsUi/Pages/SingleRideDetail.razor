
@using SmartWattsCore.Models
@using SmartWattsCore
@using SmartWattsUi.Controllers

@inject RideController _rideController



	<div class="container">

			<select @bind="@timeFrame">
				<option value=30>30 Days</option>
				<option value=90>90 Days</option>
				<option value=365>1 Year</option>
				<option value=9999>All Time</option>
			</select>

			<h5>@Ride.RideMetaData.Date</h5>
		@if (!editMode)
		{
			<h5>@Ride.RideMetaData.RideName<span class="oi oi-pencil edit-ride" @onclick="e => editMode = !editMode"></span></h5>
		}
		else
		{
			<input type="text" placeholder="@Ride.RideMetaData.RideName" @bind="newName"/>
			<button class="btn btn-outline-success" @onclick="ChangeName">Submit</button>
		}
			<ul>
				<li>Miles: @Helpers.ConvertMetersToMiles(Ride.RideMetaData.DistanceMeters)</li>
				<li>Time: @Helpers.ConvertSecToReadable(Ride.RideMetaData.TimeSeconds)</li>
				<li>Average Watts: @Ride.RideMetaData.AvgWatts</li>
				<li>Average Heart Rate:@Ride.RideMetaData.AvgHeartRate</li>
				<li>Average Cadence: @Ride.RideMetaData.AvgCadence</li>
			</ul>


			<PowerTable Ride="Ride" TimeFrame="timeFrame"></PowerTable>

		</div>

@code {
	[Parameter]
	public Ride Ride { get; set; }

	int timeFrame = 30;
	bool editMode = false;
	string newName;

	private async Task ChangeName()
	{
		Ride.RideMetaData.RideName = newName;
		await _rideController.UpdateRide(Ride);
		editMode = false;
		StateHasChanged();
	}

}

<style>
	.edit-ride {
		color: orange;
	}
</style>
